<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbxExit.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>